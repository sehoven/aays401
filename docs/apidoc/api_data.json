[  {    "type": "get",    "url": "/nearby/{Object[]}",    "title": "Get nearby neighbourhoods",    "group": "Polygon",    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n  \"neighborhoods\"[{\n      \"name\":\"NiceAvenue\",\n      \"points\":[{\"lat\":-113,\"lng\":53},{\"lat\":-113,\"lng\":53}],\n      \"center\":{\"lat\":-113,\"lng\":53},\n      \"radius\":0.111\n      \"width\":0.111\n      \"height\":0.111\n  }\n}",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 400 Null parameters\n{\n  \"error\":\"Null parameters\"\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "server/server.js",    "groupTitle": "Polygon",    "name": "GetNearbyObject"  },  {    "type": "post",    "url": "/addressCount/{Object[]}",    "title": "Location Counts",    "group": "Polygon",    "description": "<p>Receives a array of coordinates and outputs the number of units in the polygon the points create</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Object[]",            "optional": false,            "field": "An",            "description": "<p>array of latitude, and longitude points.</p>"          }        ]      },      "examples": [        {          "title": "PolygonArray:",          "content": "[{\"lat\":-113.11,\"lng\":56.232},{\"lat\":-113.11,\"lng\":56.232}]",          "type": "Object[]"        }      ]    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n  \"residential\": 112,\n     \"commercial\": 4,\n     \"industrial\": 2,\n     \"urban service\": 1,\n     \"other\": 6;\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "Polygon": [          {            "group": "Polygon",            "type": "get",            "optional": false,            "field": "NullParameters",            "description": "<p>The parameters required are null</p>"          },          {            "group": "Polygon",            "type": "get",            "optional": false,            "field": "InvalidParameters",            "description": "<p>The parameters required do not create a shape with area.</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 400 Polygon is not a polygon\n{\n  \"error\":\"Polygon points dont exist or have less that two points (Not a shape).\"\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "server/server.js",    "groupTitle": "Polygon",    "name": "PostAddresscountObject"  },  {    "type": "get",    "url": "/locations/{text}",    "title": "Search Neighbourhoods",    "name": "locations",    "group": "Polygon",    "description": "<p>Handle requests to /locations Returns all known locations that match existing query items</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "Any",            "description": "<p>text that is reterived from search bar in the frontend</p>"          }        ]      },      "examples": [        {          "title": "SearchString:",          "content": "\"Rutherford\"",          "type": "String"        }      ]    },    "error": {      "fields": {        "Polygon": [          {            "group": "Polygon",            "type": "get",            "optional": false,            "field": "NullParameters",            "description": "<p>The parameters required are null</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 400 Null parameters\n{\n  \"error\":\"Null parameters\"\n}",          "type": "json"        }      ]    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n  \"neighborhoods\"[{\n      \"name\":\"NiceAvenue\",\n      \"points\":[{\"lat\":-113,\"lng\":53},{\"lat\":-113,\"lng\":53}],\n      \"center\":{\"lat\":-113,\"lng\":53},\n      \"radius\":0.111\n      \"width\":0.111\n      \"height\":0.111\n  }\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "server/server.js",    "groupTitle": "Polygon"  },  {    "type": "post",    "url": "/login/{body[]}",    "title": "Login",    "group": "User",    "description": "<p>Receives a username and password and authenticated is with the database, checking if the user indeed exists and also if the user is authenticated to login</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Object[]",            "optional": false,            "field": "An",            "description": "<p>array of username, password</p>"          }        ]      },      "examples": [        {          "title": ":",          "content": "\"username\": \"username\",\n\"password\": \"password\"",          "type": "body[]"        }      ]    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n  \"login\":\"success\",\n     \"reason\": \"\",\n     \"code\": 20\n\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "User": [          {            "group": "User",            "type": "post",            "optional": false,            "field": "NullParameters",            "description": "<p>The parameters required are null</p>"          },          {            "group": "User",            "type": "post",            "optional": false,            "field": "DatabaseErrors",            "description": "<p>There was some database error</p>"          },          {            "group": "User",            "type": "post",            "optional": false,            "field": "UsernameTaken",            "description": "<p>The username entered is taken by another user</p>"          },          {            "group": "User",            "type": "post",            "optional": false,            "field": "NotAuthenticated",            "description": "<p>The user is not able to login becasue he/she not authorized</p>"          },          {            "group": "User",            "type": "post",            "optional": false,            "field": "InvalidPassword",            "description": "<p>Password provided does not match the correct password</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 400 Null variables\n{\n  \"login\":\"fail\",\n     \"reason\":\"Null variables\",\n     \"code\": 40\n}",          "type": "json"        },        {          "title": "Error-Response:",          "content": "HTTP/1.1 400 Database error\n{\n  \"login\":\"fail\",\n     \"reason\": \"Database error\",\n     \"code\": 41\n}",          "type": "json"        },        {          "title": "Error-Response:",          "content": "HTTP/1.1 400 Username does not exist\n{\n  \"login\":\"fail\",\n     \"reason\": \"Username does not exists\",\n     \"code\": 42\n}",          "type": "json"        },        {          "title": "Error-Response:",          "content": "HTTP/1.1 400 User is not authenticated to login by DBA\n{\n  \"login\":\"fail\",\n     \"reason\": \"This user has not been authenticted by DBA\",\n     \"code\": 42\n}",          "type": "json"        },        {          "title": "Error-Response:",          "content": "HTTP/1.1 400 Invalid Password\n{\n  \"login\":\"fail\",\n     \"reason\": \"Invalid password\",\n     \"code\": 42\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "server/server.js",    "groupTitle": "User",    "name": "PostLoginBody"  },  {    "type": "post",    "url": "/signup/{body[]}",    "title": "Signup",    "group": "User",    "description": "<p>Receives a username,email and password and checking if the either the username or email already exists. If not, the user is created, otherwise the user is returned a message that explains why the signup failed.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Object[]",            "optional": false,            "field": "An",            "description": "<p>array of username, password, email</p>"          }        ]      },      "examples": [        {          "title": ":",          "content": "\"username\": \"username\",\n\"password\": \"password\",\n\"email\": \"email\"",          "type": "body[]"        }      ]    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n  \"login\":\"success\",\n     \"reason\": \"\",\n     \"code\": 20\n\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "User": [          {            "group": "User",            "type": "post",            "optional": false,            "field": "NullParameters",            "description": "<p>The parameters required are null</p>"          },          {            "group": "User",            "type": "post",            "optional": false,            "field": "DatabaseErrors",            "description": "<p>There was some database error</p>"          },          {            "group": "User",            "type": "post",            "optional": false,            "field": "UsernameTaken",            "description": "<p>The username entered is taken by another user</p>"          },          {            "group": "User",            "type": "post",            "optional": false,            "field": "EmailTaken",            "description": "<p>The email entered is taken by another user</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 400 Null variables\n{\n  \"signup\":\"fail\",\n     \"reason\":\"Null variables\",\n     \"code\": 40\n}",          "type": "json"        },        {          "title": "Error-Response:",          "content": "HTTP/1.1 400 Database error\n{\n  \"signup\":\"fail\",\n     \"reason\": \"Database error\",\n     \"code\": 41\n}",          "type": "json"        },        {          "title": "Error-Response:",          "content": "HTTP/1.1 400 Username does not exist\n{\n  \"signup\":\"fail\",\n     \"reason\": \"Username taken by another user\",\n     \"code\": 42\n}",          "type": "json"        },        {          "title": "Error-Response:",          "content": "HTTP/1.1 400 Username does not exist\n{\n  \"signup\":\"fail\",\n     \"reason\": \"Email is taken by another user\",\n     \"code\": 42\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "server/server.js",    "groupTitle": "User",    "name": "PostSignupBody"  }]
